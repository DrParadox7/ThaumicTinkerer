   buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenLocal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.gradle:build-scan-plugin:1.3'
    }
}
apply plugin: 'com.gradle.build-scan'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
repositories {
    ivy {

        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }

    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {

        url  'http://maven.cil.li/'
    }


}
String changelogLoc = 'https://raw.github.com/Thaumic-Tinkerer/ThaumicTinkerer/changelog/web/changelog'

apply plugin: 'forge'
//apply plugin: "curseforge"



group = "thaumic.tinkerer" // http://maven.apache.org/guides/mini/guide-naming-conventions.html


ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)

version = "${config.version}-${config.build_number}"
//version = "${config.version}"
archivesBaseName = config.mod_name

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    //minecraftVersion="1.7.10"
    runDir = "eclipse"
    replace '${version}', project.version
    //coreMod("tconstruct.preloader.TConstructLoaderContainer")
    if (project.hasProperty("pass"))
        replace "INSERTPASSWORDHERE", project.pass


}

//version = 'project.version'
//if (System.getenv("BUILD_NUMBER")!=null)
//    version = "$version-${System.getenv().BUILD_NUMBER}"
//if (project.hasProperty("releaseType"))
//    if (project.releaseType == "ALPHA")
//        version = "alpha-" + version
		
//curse {
//	projectId="75598"
//	version = "2.5-${minecraft.version}"
//	if (System.getenv("BUILD_NUMBER")!=null)
//	version = "$version-${System.getenv().BUILD_NUMBER}"
//	if(project.hasProperty("apiKey"))
//	apiKey=project.apiKey
//	changelog=" "
//	releaseType="release"
//	addGameVersion "{minecraft.version}"
//}


    dependencies {
        compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
        compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
        compile "mcp.mobius.waila:Waila:1.5.10_1.7.10"
        compile "codechicken:ForgeMultipart:1.7.10-1.1.2.331:dev"

        compile 'com.mod-buildcraft:buildcraft:6.4.8:dev'
        compile "codechicken:NotEnoughItems:1.7.10-1.0.5.118:dev"
        compile "codechicken:EnderStorage:1.7.10-1.4.7.37:dev"
        compile "mantle:Mantle:1.7.10-0.3.2.jenkins187:deobf"
        compile "li.cil.oc:OpenComputers:MC1.7.10-1.5.7.536-dev:api"
        compile "li.cil.oc:OpenComputers:MC1.7.10-1.5.7.536-dev:dev"
        compile("tconstruct:TConstruct:1.7.10-1.8.3.build927:deobf") {
        }
    }
// some crazy stuff to make sure the chicken stuff is in the mods folder...
// because it wont work otherwise...  because FML doesnt laod coremods from the classpath

task copyChicken(type: Copy, dependsOn: "extractUserDev") {
    from { configurations.compile }
    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
    exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
    into file(minecraft.runDir + "/mods")

    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}
//tasks.setupDevWorkspace.dependsOn copyChicken
//tasks.setupDecompWorkspace.dependsOn copyChicken

processResources
        {
            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                // replace version and mcversion
                expand 'version': project.version, 'MCversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
jar {
    manifest {
        attributes 'FMLCorePlugin': 'thaumic.tinkerer.preloader.ThaumicTLoaderContainer'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
	//rename the default output, for some better... sanity with scipts
    archiveName = "${baseName} ${version}.${extension}"
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}


task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}
